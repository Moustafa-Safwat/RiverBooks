// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RiverBooks.Book.Data;

#nullable disable

namespace RiverBooks.Book.Data.Migrations
{
    [DbContext(typeof(BookDbContext))]
    [Migration("20241115210426_InitBookTable")]
    partial class InitBookTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Books")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RiverBooks.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Books", "Books", t =>
                        {
                            t.HasCheckConstraint("Ck_Price_Positive", "[Price] >= 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("a89f6cd7-4693-457b-9009-02205dbbfe45"),
                            Author = "F. Scott Fitzgerald",
                            Price = 10.99m,
                            RowVersion = new byte[0],
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = new Guid("e4fa19bf-6981-4e50-a542-7c9b26e9ec31"),
                            Author = "George Orwell",
                            Price = 8.99m,
                            RowVersion = new byte[0],
                            Title = "1984"
                        },
                        new
                        {
                            Id = new Guid("17c61e41-3953-42cd-8f88-d3f698869b35"),
                            Author = "Harper Lee",
                            Price = 12.99m,
                            RowVersion = new byte[0],
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = new Guid("e4fa19bf-6981-4e50-a542-7c9b26e9ec34"),
                            Author = "Jane Austen",
                            Price = 9.99m,
                            RowVersion = new byte[0],
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = new Guid("17c61e41-3953-42cd-8f88-d3f698869b38"),
                            Author = "J.D. Salinger",
                            Price = 11.99m,
                            RowVersion = new byte[0],
                            Title = "The Catcher in the Rye"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
